<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="NumbersTest" tests="1" skipped="0" failures="1" errors="0" timestamp="2023-02-02T03:05:16" hostname="PAS78" time="1.681">
  <properties/>
  <testcase name="start" classname="NumbersTest" time="1.681">
    <failure message="java.lang.AssertionError: Wrong answer in test #36&#10;&#10;Expected 11 non blank lines but actual output contains 3 lines.&#10;&#10;Please find below the output of your program during this failed test.&#10;Note that the '&gt;' character indicates the beginning of the input line.&#10;&#10;---&#10;&#10;Welcome to Amazing Numbers!&#10;&#10;Supported requests:&#10;- enter a natural number to know its properties;&#10;- enter two natural numbers to obtain the properties of the list:&#10;  * the first parameter represents a starting number;&#10;  * the second parameters show how many consecutive numbers are to be processed;&#10;- two natural numbers and a property to search for;&#10;- separate the parameters with one space;&#10;- enter 0 to exit.&#10;&#10;Enter a request: &gt; 1 10 BUZZ&#10;The property [BUZZ] is wrong.&#10;Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]&#10;&#10;Enter a request:" type="java.lang.AssertionError">java.lang.AssertionError: Wrong answer in test #36

Expected 11 non blank lines but actual output contains 3 lines.

Please find below the output of your program during this failed test.
Note that the '&gt;' character indicates the beginning of the input line.

---

Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: &gt; 1 10 BUZZ
The property [BUZZ] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request:
	at org.junit.Assert.fail(Assert.java:89)
	at org.hyperskill.hstest.stage.StageTest.start(StageTest.java:203)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:577)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$2.run(TestWorker.java:176)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:133)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:71)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 0

?[1;31m
Start test 2?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > -118

The first parameter should be a natural number or zero.

Enter a request: > 0

?[1;31m
Start test 3?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > -28

The first parameter should be a natural number or zero.

Enter a request: > 0

?[1;31m
Start test 4?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > -53

The first parameter should be a natural number or zero.

Enter a request: > 0

?[1;31m
Start test 5?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > -126

The first parameter should be a natural number or zero.

Enter a request: > 0

?[1;31m
Start test 6?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > -27

The first parameter should be a natural number or zero.

Enter a request: > 0

?[1;31m
Start test 7?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 12636 -14093
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 8?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 27481 -30848
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 9?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 17150 -24637
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 10?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 17481 -10054
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 11?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 25439 -32125
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 12?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 16924 -22941
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 13?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 3807 -23186
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 14?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 30146 -32624
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 15?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 21293 -9725
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 16?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 15553 -22720
The second parameter should be a natural number.

Enter a request: > 0

?[1;31m
Start test 17?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 1

Properties of 1
	even: false
	odd: true
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 2

Properties of 2
	even: true
	odd: false
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 3

Properties of 3
	even: false
	odd: true
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 4

Properties of 4
	even: true
	odd: false
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 5

Properties of 5
	even: false
	odd: true
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 6

Properties of 6
	even: true
	odd: false
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 7

Properties of 7
	even: false
	odd: true
	buzz: true
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 8

Properties of 8
	even: true
	odd: false
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 9

Properties of 9
	even: false
	odd: true
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: true

Enter a request: > 10

Properties of 10
	even: true
	odd: false
	buzz: false
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 11

Properties of 11
	even: false
	odd: true
	buzz: false
	duck: false
	palindromic: true
	gapful: false
	spy: false

Enter a request: > 12

Properties of 12
	even: true
	odd: false
	buzz: false
	duck: false
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 13

Properties of 13
	even: false
	odd: true
	buzz: false
	duck: false
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 14

Properties of 14
	even: true
	odd: false
	buzz: true
	duck: false
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 5350358409357999023

Properties of 5350358409357999023
	even: false
	odd: true
	buzz: true
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 3136462589944435922

Properties of 3136462589944435922
	even: true
	odd: false
	buzz: false
	duck: false
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 7098900615362714433

Properties of 7098900615362714433
	even: false
	odd: true
	buzz: false
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 9215034765945736368

Properties of 9215034765945736368
	even: true
	odd: false
	buzz: false
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 4073557242367496046

Properties of 4073557242367496046
	even: true
	odd: false
	buzz: false
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 7730777421024433611

Properties of 7730777421024433611
	even: false
	odd: true
	buzz: false
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 8221014406601844190

Properties of 8221014406601844190
	even: true
	odd: false
	buzz: true
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 7511985102257607916

Properties of 7511985102257607916
	even: true
	odd: false
	buzz: true
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 4481018321863690223

Properties of 4481018321863690223
	even: false
	odd: true
	buzz: false
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 3378555519840561614

Properties of 3378555519840561614
	even: true
	odd: false
	buzz: false
	duck: true
	palindromic: false
	gapful: false
	spy: false

Enter a request: > 0

?[1;31m
Start test 18?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 1 15
1 is odd, palindromic, spy
2 is even, palindromic, spy
3 is odd, palindromic, spy
4 is even, palindromic, spy
5 is odd, palindromic, spy
6 is even, palindromic, spy
7 is buzz, odd, palindromic, spy
8 is even, palindromic, spy
9 is odd, palindromic, spy
10 is duck, even
11 is odd, palindromic
12 is even
13 is odd
14 is buzz, even
15 is odd

Enter a request: > 0

?[1;31m
Start test 19?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 6678265120626681420 17
6678265120626681420 is duck, gapful, even
6678265120626681421 is buzz, duck, odd
6678265120626681422 is duck, even
6678265120626681423 is duck, odd
6678265120626681424 is duck, even
6678265120626681425 is duck, odd
6678265120626681426 is duck, even
6678265120626681427 is buzz, duck, odd
6678265120626681428 is buzz, duck, even
6678265120626681429 is duck, odd
6678265120626681430 is duck, even
6678265120626681431 is duck, odd
6678265120626681432 is duck, even
6678265120626681433 is duck, odd
6678265120626681434 is duck, even
6678265120626681435 is buzz, duck, odd
6678265120626681436 is duck, even

Enter a request: > 0

?[1;31m
Start test 20?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 2173317228006652858 19
2173317228006652858 is duck, even
2173317228006652859 is duck, odd
2173317228006652860 is duck, gapful, even
2173317228006652861 is buzz, duck, odd
2173317228006652862 is duck, even
2173317228006652863 is duck, odd
2173317228006652864 is duck, even
2173317228006652865 is duck, odd
2173317228006652866 is duck, even
2173317228006652867 is buzz, duck, odd
2173317228006652868 is buzz, duck, gapful, even
2173317228006652869 is duck, odd
2173317228006652870 is duck, even
2173317228006652871 is duck, odd
2173317228006652872 is duck, even
2173317228006652873 is duck, odd
2173317228006652874 is duck, even
2173317228006652875 is buzz, duck, gapful, odd
2173317228006652876 is duck, even

Enter a request: > 0

?[1;31m
Start test 21?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 3027941930750772248 4
3027941930750772248 is duck, even
3027941930750772249 is duck, odd
3027941930750772250 is duck, even
3027941930750772251 is duck, odd

Enter a request: > 0

?[1;31m
Start test 22?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 6362216783316475000 17
6362216783316475000 is duck, even
6362216783316475001 is duck, odd
6362216783316475002 is duck, even
6362216783316475003 is duck, odd
6362216783316475004 is buzz, duck, even
6362216783316475005 is duck, odd
6362216783316475006 is duck, even
6362216783316475007 is buzz, duck, odd
6362216783316475008 is duck, even
6362216783316475009 is duck, odd
6362216783316475010 is duck, even
6362216783316475011 is buzz, duck, odd
6362216783316475012 is duck, even
6362216783316475013 is duck, odd
6362216783316475014 is duck, even
6362216783316475015 is duck, odd
6362216783316475016 is duck, even

Enter a request: > 0

?[1;31m
Start test 23?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 1594100814084853143 16
1594100814084853143 is duck, odd
1594100814084853144 is buzz, duck, gapful, even
1594100814084853145 is duck, odd
1594100814084853146 is duck, even
1594100814084853147 is buzz, duck, odd
1594100814084853148 is duck, even
1594100814084853149 is duck, odd
1594100814084853150 is duck, gapful, even
1594100814084853151 is buzz, duck, gapful, odd
1594100814084853152 is duck, gapful, even
1594100814084853153 is duck, odd
1594100814084853154 is duck, even
1594100814084853155 is duck, gapful, odd
1594100814084853156 is duck, even
1594100814084853157 is buzz, duck, gapful, odd
1594100814084853158 is buzz, duck, even

Enter a request: > 0

?[1;31m
Start test 24?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 8986537533498940559 16
8986537533498940559 is duck, odd
8986537533498940560 is duck, gapful, even
8986537533498940561 is duck, odd
8986537533498940562 is buzz, duck, even
8986537533498940563 is duck, odd
8986537533498940564 is duck, even
8986537533498940565 is duck, odd
8986537533498940566 is duck, even
8986537533498940567 is buzz, duck, odd
8986537533498940568 is duck, even
8986537533498940569 is buzz, duck, odd
8986537533498940570 is duck, even
8986537533498940571 is duck, odd
8986537533498940572 is duck, even
8986537533498940573 is duck, odd
8986537533498940574 is duck, even

Enter a request: > 0

?[1;31m
Start test 25?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 6725276176738320218 14
6725276176738320218 is duck, even
6725276176738320219 is duck, odd
6725276176738320220 is duck, even
6725276176738320221 is duck, odd
6725276176738320222 is buzz, duck, even
6725276176738320223 is duck, odd
6725276176738320224 is duck, even
6725276176738320225 is duck, odd
6725276176738320226 is duck, even
6725276176738320227 is buzz, duck, odd
6725276176738320228 is duck, even
6725276176738320229 is buzz, duck, odd
6725276176738320230 is duck, even
6725276176738320231 is duck, odd

Enter a request: > 0

?[1;31m
Start test 26?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 3397996724121161896 13
3397996724121161896 is even
3397996724121161897 is buzz, odd
3397996724121161898 is even
3397996724121161899 is odd
3397996724121161900 is duck, even
3397996724121161901 is duck, odd
3397996724121161902 is duck, even
3397996724121161903 is duck, odd
3397996724121161904 is buzz, duck, even
3397996724121161905 is duck, odd
3397996724121161906 is duck, even
3397996724121161907 is buzz, duck, odd
3397996724121161908 is duck, even

Enter a request: > 0

?[1;31m
Start test 27?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 5918048247169976870 19
5918048247169976870 is duck, even
5918048247169976871 is duck, odd
5918048247169976872 is duck, even
5918048247169976873 is duck, odd
5918048247169976874 is duck, even
5918048247169976875 is duck, odd
5918048247169976876 is buzz, duck, even
5918048247169976877 is buzz, duck, odd
5918048247169976878 is duck, even
5918048247169976879 is duck, odd
5918048247169976880 is duck, even
5918048247169976881 is duck, odd
5918048247169976882 is duck, even
5918048247169976883 is buzz, duck, odd
5918048247169976884 is duck, even
5918048247169976885 is duck, gapful, odd
5918048247169976886 is duck, even
5918048247169976887 is buzz, duck, odd
5918048247169976888 is duck, even

Enter a request: > 0

?[1;31m
Start test 28?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 5990101102728371843 2
5990101102728371843 is duck, odd
5990101102728371844 is duck, even

Enter a request: > 0

?[1;31m
Start test 29?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 1 10 May
The property [MAY] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request: > 0

?[1;31m
Start test 30?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 40 2 bay
The property [BAY] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request: > 0

?[1;31m
Start test 31?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 37 4 8
The property [8] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request: > 0

?[1;31m
Start test 32?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 67 2 day
The property [DAY] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request: > 0

?[1;31m
Start test 33?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 2 54 Prime
The property [PRIME] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request: > 0

?[1;31m
Start test 34?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 6 8 ...
The property [...] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request: > 0

?[1;31m
Start test 35?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 5 9 none
The property [NONE] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

Enter a request: > 0

?[1;31m
Start test 36?[0m
Welcome to Amazing Numbers!

Supported requests:
- enter a natural number to know its properties;
- enter two natural numbers to obtain the properties of the list:
  * the first parameter represents a starting number;
  * the second parameters show how many consecutive numbers are to be processed;
- two natural numbers and a property to search for;
- separate the parameters with one space;
- enter 0 to exit.

Enter a request: > 1 10 BUZZ
The property [BUZZ] is wrong.
Available properties: [BUZZ, DUCK, PALINDROMIC, GAPFUL, SPY, EVEN, ODD]

]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
